# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  docker-node:
    docker:
      - image: circleci/node:13.8.0

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test-frontend:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    executor: docker-node
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Build
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Run tests
          command: |
            cd frontend
            npm test
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build

  build-and-test-backend:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    executor: docker-node
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Build
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Run tests
          command: |
            cd backend
            npm test
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

  scan-frontend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontned-build

  scan-backend:
    executor: docker-node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical 
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  main-workflow:
    jobs:
      - build-and-test-frontend
      - build-and-test-backend
      - scan-frontend:
          requires:
            - build-and-test-frontend
      - scan-backend:
          requires:
            - build-and-test-backend